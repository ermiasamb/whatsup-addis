/* eslint-disable */
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id             String           @id @default(uuid())
  fullName       String
  email          String           @unique
  passwordHash   String
  dob            DateTime?
  phone          String?
  location       String?
  preferences    Json?
  profilePicture String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  events         Events[]
  bookings       Bookings[]
  payments       Payments[]
  notifications  Notifications[]
  reviews        Reviews[]
  socialShares   SocialShares[]
  eventChats     EventChats[]
  organizers     Organizers?
  securityLogs   Aisecuritylogs[]
}

model Events {
  id                 String           @id @default(uuid())
  organizerId        String
  title              String
  description        String?
  category           String
  startTime          DateTime
  endTime            DateTime
  location           String
  venueId            String?
  venueDetails       Json?
  ticketTypes        Json?
  media              Json?
  isVirtual          Boolean          @default(false)
  blockchainVerified Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  organizer          Users            @relation(fields: [organizerId], references: [id])
  venue              Venues?          @relation(fields: [venueId], references: [id])
  bookings           Bookings[]
  eventChats         EventChats[]
  reviews            Reviews[]
  socialShares       SocialShares[]
  securityLogs       Aisecuritylogs[]
  Organizers         Organizers?      @relation(fields: [organizersId], references: [id])
  organizersId       String?
}

model EventChats {
  id          String   @id @default(uuid())
  eventId     String
  userId      String
  message     String
  messageType String   @default("Text")
  sentAt      DateTime @default(now())
  event       Events   @relation(fields: [eventId], references: [id])
  user        Users    @relation(fields: [userId], references: [id])
}

model Venues {
  id         String   @id @default(uuid())
  name       String
  location   String
  capacity   Int
  facilities Json?
  gallery    Json?
  mapLink    String?
  createdAt  DateTime @default(now())
  events     Events[]
}

model Bookings {
  id         String    @id @default(uuid())
  userId     String
  eventId    String
  paymentId  String    @unique
  ticketType String
  quantity   Int
  totalPrice Float
  status     String    @default("Pending")
  createdAt  DateTime  @default(now())
  user       Users     @relation(fields: [userId], references: [id])
  event      Events    @relation(fields: [eventId], references: [id])
  payment    Payments? @relation(fields: [paymentId], references: [id])
}

model Payments {
  id        String    @id @default(uuid())
  userId    String
  bookingId String
  amount    Float
  status    String    @default("Pending")
  createdAt DateTime  @default(now())
  user      Users     @relation(fields: [userId], references: [id])
  booking   Bookings?
}

model Reviews {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      Users    @relation(fields: [userId], references: [id])
  event     Events   @relation(fields: [eventId], references: [id])
}

model SocialShares {
  id       String   @id @default(uuid())
  userId   String
  eventId  String
  platform String
  sharedAt DateTime @default(now())
  user     Users    @relation(fields: [userId], references: [id])
  event    Events   @relation(fields: [eventId], references: [id])
}

model Notifications {
  id        String   @id @default(uuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      Users    @relation(fields: [userId], references: [id])
}

model Organizers {
  id               String   @id @default(uuid())
  userId           String   @unique
  organizationName String
  bio              String?
  website          String?
  socialLinks      Json?
  createdAt        DateTime @default(now())
  user             Users    @relation(fields: [userId], references: [id])
  events           Events[]
}

model Aisecuritylogs {
  id         String   @id @default(uuid())
  eventId    String
  userId     String?
  logType    String
  logMessage String
  createdAt  DateTime @default(now())
  event      Events   @relation(fields: [eventId], references: [id])
  user       Users?   @relation(fields: [userId], references: [id])
}
